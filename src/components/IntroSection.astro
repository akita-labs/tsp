---
interface Props {
    title?: string;
    subtitle?: string;
}

const { 
    title = "构建下一代互联网的信任基石",
    subtitle = "TSP并非对现有协议的微小改进，而是一个基础性的'跨越层'，旨在为去中心化身份和未来的代理式网络提供通用、可互操作的信任。"
} = Astro.props;
---

<section id="intro" class="hero-section" data-theme-section="dark">
    <div class="hero-background">
        <div class="hero-gradient"></div>
        <div class="hero-pattern"></div>
        <canvas id="network-canvas"></canvas>
    </div>
    
    <div class="container hero-content">
        <div class="hero-badge">
            <span class="badge-icon">⚡</span>
            <span class="badge-text">下一代信任协议</span>
        </div>
        
        <h1 class="hero-title">
            <span class="title-line">{title}</span>
            <span class="title-highlight">Trust Spanning Protocol</span>
        </h1>
        
        <p class="hero-subtitle">
            {subtitle}
        </p>
        
        <div class="hero-actions">
            <a href="#problem" class="btn btn-primary">
                开始探索
                <span class="btn-arrow">→</span>
            </a>
            <a href="#architecture" class="btn btn-secondary">
                技术架构
            </a>
        </div>
        
        <div class="hero-stats">
            <div class="stat-item">
                <span class="stat-number" data-count="100">0</span>
                <span class="stat-label">% 去中心化</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" data-count="0">0</span>
                <span class="stat-label">中间商</span>
            </div>
            <div class="stat-item">
                <span class="stat-icon">∞</span>
                <span class="stat-label">可扩展性</span>
            </div>
        </div>
        
        <div class="hero-quote">
            <blockquote class="quote">
                <p class="quote-text">
                    "信任不应该被中心化控制，而应该在端点之间自由流动。
                    TSP 让这一愿景成为现实。"
                </p>
                <cite class="quote-author">— TSP 基金会</cite>
            </blockquote>
        </div>
    </div>
    
    <div class="scroll-indicator">
        <span class="scroll-text">向下滚动</span>
        <div class="scroll-arrow"></div>
    </div>
</section>

<style>
    .hero-section {
        position: relative;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        padding-top: var(--nav-bar-height);
    }
    
    .hero-background {
        position: absolute;
        inset: 0;
        z-index: 0;
    }
    
    .hero-gradient {
        position: absolute;
        inset: 0;
        background: linear-gradient(135deg, 
            rgba(28, 29, 36, 0.95) 0%,
            rgba(34, 35, 43, 0.9) 50%,
            rgba(28, 29, 36, 0.95) 100%);
    }
    
    .hero-pattern {
        position: absolute;
        inset: 0;
        background-image: 
            radial-gradient(circle at 20% 50%, rgba(244, 203, 105, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 80% 80%, rgba(147, 136, 254, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 40% 80%, rgba(244, 203, 105, 0.05) 0%, transparent 50%);
    }
    
    #network-canvas {
        position: absolute;
        inset: 0;
        opacity: 0.3;
    }
    
    .hero-content {
        position: relative;
        z-index: 1;
        text-align: center;
        padding: 2rem;
    }
    
    .hero-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: rgba(244, 203, 105, 0.1);
        border: 1px solid rgba(244, 203, 105, 0.3);
        border-radius: 2rem;
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out;
    }
    
    .badge-icon {
        font-size: 1.25rem;
        animation: pulse 2s infinite;
    }
    
    .badge-text {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--color-primary);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .hero-title {
        font-size: clamp(2.5rem, 6vw, 4.5rem);
        font-weight: 700;
        line-height: 1.1;
        margin-bottom: 1.5rem;
        animation: fadeInUp 0.8s ease-out 0.2s both;
    }
    
    .title-line {
        display: block;
        color: var(--color-light);
        margin-bottom: 0.5rem;
    }
    
    .title-highlight {
        display: block;
        background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-secondary) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 0.7em;
        font-weight: 600;
        letter-spacing: 0.02em;
    }
    
    .hero-subtitle {
        font-size: clamp(1rem, 2vw, 1.25rem);
        line-height: 1.7;
        color: var(--color-text-light);
        max-width: 42rem;
        margin: 0 auto 2.5rem;
        opacity: 0.9;
        animation: fadeInUp 0.8s ease-out 0.4s both;
    }
    
    .hero-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
        margin-bottom: 4rem;
        animation: fadeInUp 0.8s ease-out 0.6s both;
    }
    
    .btn-arrow {
        display: inline-block;
        margin-left: 0.5rem;
        transition: transform 0.3s ease;
    }
    
    .btn:hover .btn-arrow {
        transform: translateX(4px);
    }
    
    .hero-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 2rem;
        max-width: 24rem;
        margin: 0 auto;
        animation: fadeInUp 0.8s ease-out 0.8s both;
    }
    
    .stat-item {
        text-align: center;
    }
    
    .stat-number, .stat-icon {
        display: block;
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--color-primary);
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        font-size: 0.875rem;
        color: var(--color-text-light);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        opacity: 0.8;
    }
    
    /* Hero Quote */
    .hero-quote {
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(244, 203, 105, 0.2);
        animation: fadeInUp 1s ease-out 0.8s both;
    }
    
    .quote {
        max-width: 36rem;
        margin: 0 auto;
    }
    
    .quote-text {
        font-size: 1.25rem;
        line-height: 1.8;
        color: rgba(255, 255, 255, 0.9);
        font-style: italic;
        margin-bottom: 1rem;
        position: relative;
    }
    
    .quote-text::before,
    .quote-text::after {
        content: '"';
        font-size: 2.5rem;
        color: var(--color-primary);
        opacity: 0.3;
        position: absolute;
    }
    
    .quote-text::before {
        top: -0.5rem;
        left: -1.5rem;
    }
    
    .quote-text::after {
        bottom: -1.5rem;
        right: -1.5rem;
    }
    
    .quote-author {
        font-size: 0.875rem;
        color: var(--color-primary);
        opacity: 0.9;
        font-style: normal;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .scroll-indicator {
        position: absolute;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        text-align: center;
        animation: bounce 2s infinite;
    }
    
    .scroll-text {
        display: block;
        font-size: 0.75rem;
        color: var(--color-text-light);
        margin-bottom: 0.5rem;
        opacity: 0.6;
        text-transform: uppercase;
        letter-spacing: 0.1em;
    }
    
    .scroll-arrow {
        width: 24px;
        height: 24px;
        margin: 0 auto;
        border-right: 2px solid var(--color-primary);
        border-bottom: 2px solid var(--color-primary);
        transform: rotate(45deg);
        opacity: 0.6;
    }
    
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateX(-50%) translateY(0);
        }
        40% {
            transform: translateX(-50%) translateY(-10px);
        }
        60% {
            transform: translateX(-50%) translateY(-5px);
        }
    }
    
    @media (max-width: 768px) {
        .hero-section {
            min-height: 90vh;
        }
        
        .hero-actions {
            flex-direction: column;
            align-items: center;
        }
        
        .hero-stats {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
    }
</style>

<script>
    // Animated network background
    const canvas = document.getElementById('network-canvas') as HTMLCanvasElement;
    if (canvas) {
        const ctx = canvas.getContext('2d');
        if (ctx) {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            const particles: any[] = [];
            const particleCount = 50;
            
            class Particle {
                x: number;
                y: number;
                vx: number;
                vy: number;
                radius: number;
                
                constructor() {
                    this.x = Math.random() * canvas.width;
                    this.y = Math.random() * canvas.height;
                    this.vx = (Math.random() - 0.5) * 0.5;
                    this.vy = (Math.random() - 0.5) * 0.5;
                    this.radius = Math.random() * 2 + 1;
                }
                
                update() {
                    this.x += this.vx;
                    this.y += this.vy;
                    
                    if (this.x < 0 || this.x > canvas.width) this.vx = -this.vx;
                    if (this.y < 0 || this.y > canvas.height) this.vy = -this.vy;
                }
                
                draw() {
                    if (ctx) {
                        ctx.beginPath();
                        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                        ctx.fillStyle = 'rgba(244, 203, 105, 0.5)';
                        ctx.fill();
                    }
                }
            }
            
            for (let i = 0; i < particleCount; i++) {
                particles.push(new Particle());
            }
            
            function animate() {
                if (ctx) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    
                    particles.forEach(particle => {
                        particle.update();
                        particle.draw();
                    });
                    
                    // Draw connections
                    particles.forEach((p1, i) => {
                        particles.slice(i + 1).forEach(p2 => {
                            const dx = p1.x - p2.x;
                            const dy = p1.y - p2.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            if (distance < 150) {
                                ctx.beginPath();
                                ctx.moveTo(p1.x, p1.y);
                                ctx.lineTo(p2.x, p2.y);
                                ctx.strokeStyle = `rgba(244, 203, 105, ${0.2 * (1 - distance / 150)})`;
                                ctx.stroke();
                            }
                        });
                    });
                }
                
                requestAnimationFrame(animate);
            }
            
            animate();
            
            window.addEventListener('resize', () => {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            });
        }
    }
    
    // Animated counter for stats
    const counters = document.querySelectorAll('.stat-number[data-count]');
    counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-count') || '0');
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;
        
        const updateCounter = () => {
            current += step;
            if (current < target) {
                counter.textContent = Math.floor(current).toString();
                requestAnimationFrame(updateCounter);
            } else {
                counter.textContent = target.toString();
            }
        };
        
        // Start animation when in viewport
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    updateCounter();
                    observer.unobserve(entry.target);
                }
            });
        });
        
        observer.observe(counter);
    });
</script>