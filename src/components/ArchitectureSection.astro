---
import Section from './Section.astro';
import Card from './Card.astro';
---

<Section 
    id="architecture" 
    theme="light"
    label="Êû∂ÊûÑËß£Êûê"
    title="TSPÂ¶Ç‰ΩïÂ∑•‰ΩúÔºü"
    subtitle="TSPÁöÑËÆæËÆ°ÈÅµÂæ™ÊûÅÁÆÄ„ÄÅÂàÜÂ±ÇÁöÑÂéüÂàôÔºåÂÖ∂Ê†∏ÂøÉÊòØ'‰ø°‰ªªÊè°Êâã'ËøáÁ®ãÔºå‰ª•Âª∫Á´ãÂÆâÂÖ®ÁöÑÁÇπÂØπÁÇπÈÄö‰ø°‰ø°ÈÅì„ÄÇ"
>
    <div class="architecture-container">

        <div class="architecture-grid">
            <Card variant="elevated" className="hourglass-card">
                <h3 class="card-title">ToIP Ê≤ôÊºèÊ®°Âûã</h3>
                <div class="hourglass-diagram">
                    <div class="layer layer-top">
                        <div class="layer-content">
                            <span class="layer-icon">üì±</span>
                            <span class="layer-text">Â∫îÁî® & ‰ø°‰ªª‰ªªÂä°</span>
                            <span class="layer-label">L3/L4</span>
                        </div>
                    </div>
                    
                    <div class="hourglass-neck">
                        <svg viewBox="0 0 200 60" class="neck-shape">
                            <path d="M0,0 L200,0 L150,30 L200,60 L0,60 L50,30 Z" fill="url(#hourglassGradient)"/>
                            <defs>
                                <linearGradient id="hourglassGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" style="stop-color:rgba(244,203,105,0.1)" />
                                    <stop offset="50%" style="stop-color:rgba(244,203,105,0.3)" />
                                    <stop offset="100%" style="stop-color:rgba(244,203,105,0.1)" />
                                </linearGradient>
                            </defs>
                        </svg>
                    </div>
                    
                    <div class="layer layer-middle">
                        <div class="layer-content layer-tsp">
                            <span class="layer-icon">üîê</span>
                            <span class="layer-text">TSP</span>
                            <span class="layer-label">L2</span>
                        </div>
                    </div>
                    
                    <div class="hourglass-neck hourglass-neck-bottom">
                        <svg viewBox="0 0 200 60" class="neck-shape">
                            <path d="M50,0 L0,30 L0,60 L200,60 L200,30 L150,0 Z" fill="url(#hourglassGradient2)"/>
                            <defs>
                                <linearGradient id="hourglassGradient2" x1="0%" y1="0%" x2="100%" y2="100%">
                                    <stop offset="0%" style="stop-color:rgba(244,203,105,0.1)" />
                                    <stop offset="50%" style="stop-color:rgba(244,203,105,0.3)" />
                                    <stop offset="100%" style="stop-color:rgba(244,203,105,0.1)" />
                                </linearGradient>
                            </defs>
                        </svg>
                    </div>
                    
                    <div class="layer layer-bottom">
                        <div class="layer-content">
                            <span class="layer-icon">üñ•Ô∏è</span>
                            <span class="layer-text">Á°¨‰ª∂ & ÁΩëÁªú</span>
                            <span class="layer-label">L1</span>
                        </div>
                    </div>
                </div>
                <p class="card-description">
                    ‰∏é‰∫íËÅîÁΩëÂçèËÆÆ(IP)Á±ª‰ººÔºåTSP‰Ωç‰∫éÊ≤ôÊºèÁöÑ"Á™ÑËÖ∞"Â§ÑÔºå‰∏∫‰∏äÂ±ÇÊó†Êï∞ÁöÑÂ∫îÁî®Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÈÄöÁî®ÁöÑ„ÄÅÊûÅÁÆÄÁöÑ‰ø°‰ªªÂ±Ç„ÄÇ
                </p>
            </Card>

            <Card variant="elevated" className="handshake-card">
                <h3 class="card-title">‰∫§‰∫íÂºè"‰ø°‰ªªÊè°Êâã"ÊµÅÁ®ã</h3>
                <div class="handshake-wrapper">
                    <div class="handshake-visual">
                        <div class="endpoint endpoint-left">
                            <div class="endpoint-icon">üë§</div>
                            <div class="endpoint-label">Á´ØÁÇπ A</div>
                        </div>
                        
                        <div class="handshake-flow">
                            <div id="handshake-container" class="handshake-steps"></div>
                            <div class="connection-line">
                                <div class="pulse-dot"></div>
                            </div>
                        </div>
                        
                        <div class="endpoint endpoint-right">
                            <div class="endpoint-icon">üåê</div>
                            <div class="endpoint-label">Á´ØÁÇπ B</div>
                        </div>
                    </div>
                    
                    <div class="handshake-controls">
                        <button id="prev-step" class="control-btn control-prev">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"/>
                            </svg>
                            ‰∏ä‰∏ÄÊ≠•
                        </button>
                        
                        <div class="step-progress">
                            <div class="progress-bar">
                                <div id="progress-fill" class="progress-fill"></div>
                            </div>
                            <div id="step-indicator" class="step-indicator">Á¨¨ 1 / 6 Ê≠•</div>
                        </div>
                        
                        <button id="next-step" class="control-btn control-next">
                            ‰∏ã‰∏ÄÊ≠•
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </Card>
        </div>
    </div>
</Section>

<style>
    .architecture-container {
        max-width: 1600px;
        margin: 0 auto;
    }
    
    .architecture-grid {
        display: grid;
        gap: 3rem;
        margin-bottom: 3rem;
    }
    
    @media (min-width: 1200px) {
        .architecture-grid {
            grid-template-columns: 1fr 1.5fr;
            align-items: start;
        }
    }
    
    @media (min-width: 1600px) {
        .architecture-grid {
            gap: 4rem;
        }
    }
    
    /* Hourglass Card */
    .hourglass-card {
        text-align: center;
    }
    
    .card-title {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 2rem;
        text-align: center;
    }
    
    .hourglass-diagram {
        position: relative;
        max-width: 300px;
        margin: 0 auto 2rem;
    }
    
    .layer {
        position: relative;
        padding: 1.5rem;
        margin: 0.5rem 0;
    }
    
    .layer-content {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(254, 249, 240, 0.9) 100%);
        border: 2px solid var(--color-border);
        border-radius: var(--border-radius-small);
        padding: 1.25rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        transition: all var(--animation-primary);
    }
    
    .layer-content:hover {
        transform: scale(1.05);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    
    .layer-tsp {
        background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-primary-hover) 100%);
        border-color: var(--color-primary);
        color: var(--color-dark);
        font-weight: 700;
        transform: scale(1.1);
        box-shadow: 0 10px 30px rgba(244, 203, 105, 0.3);
    }
    
    .layer-icon {
        font-size: 1.5rem;
    }
    
    .layer-text {
        font-weight: 500;
        font-size: 0.9rem;
    }
    
    .layer-label {
        font-size: 0.75rem;
        opacity: 0.7;
        font-weight: 600;
    }
    
    .hourglass-neck {
        position: relative;
        height: 60px;
        margin: -10px 0;
    }
    
    .neck-shape {
        width: 100%;
        height: 100%;
    }
    
    .card-description {
        text-align: center;
        color: var(--color-text);
        line-height: 1.7;
        margin-top: 1.5rem;
    }
    
    /* Handshake Card */
    .handshake-card {
        position: relative;
    }
    
    .handshake-wrapper {
        position: relative;
    }
    
    .handshake-visual {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 3rem;
        position: relative;
        min-height: 200px;
    }
    
    .endpoint {
        flex: 0 0 auto;
        text-align: center;
        z-index: 2;
    }
    
    .endpoint-icon {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-primary-hover) 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        margin: 0 auto 0.75rem;
        box-shadow: 0 10px 30px rgba(244, 203, 105, 0.3);
        animation: float 3s ease-in-out infinite;
    }
    
    .endpoint-left .endpoint-icon {
        animation-delay: 0s;
    }
    
    .endpoint-right .endpoint-icon {
        animation-delay: 1.5s;
    }
    
    .endpoint-label {
        font-weight: 600;
        color: var(--color-dark);
    }
    
    .handshake-flow {
        flex: 1;
        position: relative;
        padding: 0 2rem;
    }
    
    .handshake-steps {
        position: relative;
        min-height: 150px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .connection-line {
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, 
            var(--color-primary) 0%, 
            var(--color-primary-hover) 50%, 
            var(--color-primary) 100%);
        transform: translateY(-50%);
        opacity: 0.3;
    }
    
    .pulse-dot {
        position: absolute;
        width: 12px;
        height: 12px;
        background: var(--color-primary);
        border-radius: 50%;
        top: 50%;
        left: 0;
        transform: translateY(-50%);
        animation: moveDot 3s linear infinite;
    }
    
    @keyframes moveDot {
        0% { left: 0; opacity: 0; }
        10% { opacity: 1; }
        90% { opacity: 1; }
        100% { left: calc(100% - 12px); opacity: 0; }
    }
    
    /* Handshake Controls */
    .handshake-controls {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 2rem;
        padding: 2rem;
        background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);
        border-radius: var(--border-radius-small);
    }
    
    .control-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        background: white;
        border: 2px solid var(--color-border);
        border-radius: var(--border-radius-small);
        font-weight: 500;
        color: var(--color-dark);
        cursor: pointer;
        transition: all var(--animation-primary);
    }
    
    .control-btn:hover:not(:disabled) {
        background: var(--color-primary);
        border-color: var(--color-primary);
        color: var(--color-dark);
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(244, 203, 105, 0.3);
    }
    
    .control-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .step-progress {
        flex: 1;
        max-width: 300px;
    }
    
    .progress-bar {
        height: 6px;
        background: var(--color-border);
        border-radius: 3px;
        overflow: hidden;
        margin-bottom: 0.75rem;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--color-primary) 0%, var(--color-primary-hover) 100%);
        border-radius: 3px;
        transition: width var(--animation-primary);
        width: 16.67%;
    }
    
    .step-indicator {
        text-align: center;
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--color-text);
    }
    
    /* Step content styles */
    .step-content {
        background: white;
        border-radius: var(--border-radius-small);
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        text-align: center;
        transition: all var(--animation-smooth);
    }
    
    .step-content.hidden {
        opacity: 0;
        transform: translateY(20px);
        position: absolute;
        pointer-events: none;
    }
    
    @media (max-width: 968px) {
        .handshake-visual {
            flex-direction: column;
            gap: 2rem;
        }
        
        .handshake-flow {
            width: 100%;
            padding: 2rem 0;
        }
        
        .connection-line {
            display: none;
        }
        
        .handshake-controls {
            flex-direction: column;
        }
        
        .step-progress {
            width: 100%;
        }
    }
</style>

<script>
    const handshakeSteps = [
        {
            title: "Á¨¨‰∏ÄÊ≠•ÔºöËß£ÊûêVID",
            description: "Á´ØÁÇπAËß£ÊûêÁ´ØÁÇπBÁöÑÂèØÈ™åËØÅÊ†áËØÜÁ¨¶(VID/DID)Ôºå‰ª•Ëé∑ÂèñÂÖ∂ÂÖ¨Èí•ÂíåÁΩëÁªúÂú∞ÂùÄÁ≠â‰ø°ÊÅØ„ÄÇ"
        },
        {
            title: "Á¨¨‰∫åÊ≠•ÔºöÈ™åËØÅVID",
            description: "Á´ØÁÇπAÈÄöËøáÂØÜÁ†ÅÂ≠¶ÊåëÊàò-ÂìçÂ∫îÔºåÈ™åËØÅÁ´ØÁÇπBÁ°ÆÂÆûÊéßÂà∂ÁùÄÂÖ∂VIDÂØπÂ∫îÁöÑÁßÅÈí•ÔºåÈò≤Ê≠¢Ë∫´‰ªΩÊ¨∫È™ó„ÄÇ"
        },
        {
            title: "Á¨¨‰∏âÊ≠•ÔºöÂàõÂª∫Ê∂àÊÅØ",
            description: "Á´ØÁÇπAÊûÑÂª∫Á¨¨‰∏ÄÊù°TSPÊ∂àÊÅØ„ÄÇÂÖ≥ÈîÆÁöÑÊòØÔºåËøôÊù°Ê∂àÊÅØÂèØ‰ª•Á´ãÂç≥Êê∫Â∏¶Â∫îÁî®Êï∞ÊçÆÔºåÊó†ÈúÄÁ≠âÂæÖ„ÄÇ"
        },
        {
            title: "Á¨¨ÂõõÊ≠•ÔºöÂª∫Á´ã‰º†Ëæì",
            description: "Á´ØÁÇπA‰ΩøÁî®Ëß£ÊûêÂá∫ÁöÑÁΩëÁªúÂú∞ÂùÄÔºå‰∏éÁ´ØÁÇπBÂª∫Á´ã‰∏Ä‰∏™Â∫ïÂ±Ç‰º†ËæìËøûÊé•ÔºàÂ¶ÇTCPÔºâ„ÄÇ"
        },
        {
            title: "Á¨¨‰∫îÊ≠•ÔºöÂèëÈÄÅÊ∂àÊÅØ",
            description: "Â∞ÜÂÆåÊï¥Á≠æÂêçÂíåÂä†ÂØÜÁöÑTSPÊ∂àÊÅØÈÄöËøáÂ∑≤Âª∫Á´ãÁöÑ‰º†ËæìÂ±ÇÂèëÈÄÅÁªôÁ´ØÁÇπB„ÄÇ"
        },
        {
            title: "Á¨¨ÂÖ≠Ê≠•ÔºöÊõ¥Êñ∞Áä∂ÊÄÅ",
            description: "Á´ØÁÇπAÂú®Êú¨Âú∞ËÆ∞ÂΩïËØ•‰ø°‰ªªÂÖ≥Á≥ªÂ∑≤Âª∫Á´ã„ÄÇÂΩìBÂÆåÊàêÂêåÊ†∑ÁöÑËøáÁ®ãÂêéÔºå‰∏Ä‰∏™ÂèåÂêë‰ø°‰ªª‰ø°ÈÅì‰æøÂΩ¢Êàê‰∫Ü„ÄÇ"
        }
    ];

    let currentStep = 0;
    const handshakeContainer = document.getElementById('handshake-container');
    const prevBtn = document.getElementById('prev-step');
    const nextBtn = document.getElementById('next-step');
    const stepIndicator = document.getElementById('step-indicator');

    function renderHandshakeStep() {
        handshakeContainer.innerHTML = '';
        handshakeSteps.forEach((step, index) => {
            const stepEl = document.createElement('div');
            stepEl.className = 'step-content';
            if (index !== currentStep) {
                stepEl.classList.add('hidden');
            }
            stepEl.innerHTML = `
                <h4 style="font-size: 1.25rem; font-weight: 600; color: var(--color-dark); margin-bottom: 0.75rem;">${step.title}</h4>
                <p style="color: var(--color-text); line-height: 1.6;">${step.description}</p>
            `;
            handshakeContainer.appendChild(stepEl);
        });
        
        // Update progress
        stepIndicator.textContent = `Á¨¨ ${currentStep + 1} / ${handshakeSteps.length} Ê≠•`;
        const progressFill = document.getElementById('progress-fill');
        if (progressFill) {
            progressFill.style.width = `${((currentStep + 1) / handshakeSteps.length) * 100}%`;
        }
        
        // Update button states
        prevBtn.disabled = currentStep === 0;
        nextBtn.disabled = currentStep === handshakeSteps.length - 1;
    }

    nextBtn.addEventListener('click', () => {
        if (currentStep < handshakeSteps.length - 1) {
            currentStep++;
            renderHandshakeStep();
        }
    });

    prevBtn.addEventListener('click', () => {
        if (currentStep > 0) {
            currentStep--;
            renderHandshakeStep();
        }
    });

    renderHandshakeStep();
</script>